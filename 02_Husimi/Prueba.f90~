!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!! Este programa es una prueba para Husimi  !!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! compile as:
! gfortran -o Diagonalizacion ./Diagonalizacion.f90 -L/usr/local/lib -llapack -lblas
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

program prueba

  implicit none
  integer k, res
  double precision x
  integer :: i,ii,n,m,j,jj,l
  integer, allocatable :: r(:)
  real(8), allocatable :: m0p(:,:),m1p(:,:),evls(:),Ek(:)
  double precision :: phi, theta, P, Q, Hus, delta
  real(8) :: Pi=acos(-1.0)

  ! 1) Pedimos un j, se calcula el valor de n y se construye un rango r de -j a j para los valores de m
  print*, 'Introduce un valor de j:'
  read*, j
  n=2*j+1

  ! Asignamos el tamaño a las matrices de nxn
  allocate(m0p(n,n))
  allocate(m1p(n,n))
  allocate(evls(n))
  allocate(r(n))
  allocate(Ek(n))
  print*, 'El rango de la matriz es:', n
  call range(n,j,r)
  print*

  ! comienza todos los elementos en zero para evitar errores
  do i=1,n
     do ii=1,n
        m0p(i,ii)=0.0
     end do
  end do

  ! 2) Vamos a llamar a gmx para calcular una lista de eigenvectores para un valor de gammax particular
  m1p(:,:)=m0p(:,:)
  x=-4
  print*, 'El valor de gammax es:', x
  call gmx(x,m1p,n,j,r,evls)

  !print*, 'Eigenvalores'
  !do i=1, n   ! Imprime los eigenvalores
   !  print*,' eigenvalor: ', i ,' = ',evls(i)
  !end do
  
  !print*
  !print*,'Eigenvectores'
  !do i=1, n
   ! print*,'eigenvector(',i,'):',m1p(:,i) 
 !enddo
 !print*
 print*, 'Elije un estado k de los n posibles '
 read*, k
 !print*, 'El estado que elegiste es:', m1p(:,k)

 !Asignamos a Ek(n) los valores del estado k-ésimo elegido
 Ek(:)=m1p(:,k)
 !print*, 'Se asignaron a Ek los siguientes valores'
 !print*, Ek(:)
 !print*
 
     ! 3) Vamos a iterar sobre theta y phi, guardaremos en un archivo los valores de Husimi, P, Q
 theta=0.0
 delta = Pi/100.0
 open(20, file = 'Q.dat', status = 'unknown')
 
  do i=0, 100
     phi = 0.0 ! Se reinicia phi
     do ii=0, 200
        call Husimi(j,r,theta,phi,Ek,Hus,P,Q)
        write(20,*) Q, P, Hus
        phi = phi + delta
     end do
     theta = theta + delta
     write(20,*)
  end do
  close(20)

  print*, '--------------------------------------------------'
  print*, 'File: "Q.dat"'
end program prueba

!!!!-----------------------------------------------------------------!!!!
!!!!                            HUSIMI                               !!!!
!!!!
!!!!-----------------------------------------------------------------!!!!
subroutine Husimi(j,r,theta,phi,Ek,Hus,P,Q)
  integer :: j, n, i, ii
  integer :: r(n)
  complex(8) :: alpha, z, alphC, suma1
  double precision :: phi, theta, b, d, Hus, P, Q, Ek(2*j+1)
  double precision :: h
  double precision :: Pi = acos(-1.0)

  ! Aquí se calcula alpha para un theta y phi en particular.
  z= cmplx(cos(phi),-sin(phi))
  alpha = tan(theta/2.0)*z
  alphC = conjg(alpha)
  suma1 = cmplx(0.0,0.0,kind(0d0)) !! suma1 comienza en cero
  n=2*j+1

  ! Se calcula P y Q
  Q=sqrt(2*(1-cos(theta)))*cos(phi)
  P=-sqrt(2*(1-cos(theta)))*sin(phi)
  
  !! Calculamos una sola suma y le sacamos el valor absoluto al cuadrado
  h=1/(1+abs(alpha)**2)**j
  do i=1, n
     call binomial(2*j,j+r(i),b)
     suma1 = suma1 + Ek(i)*sqrt(b)*(alphC)**(j+r(i))
  end do

  !Se calcula finalmente el valor de Q(alpha)
  Hus= abs(h*suma1)**2
end subroutine Husimi

!!!!-----------------------------------------------------------------!!!!
!!!!                         BINOMIAL                                !!!!
!!!!-----------------------------------------------------------------!!!!
subroutine binomial(x,y,b)
     implicit none
     integer :: x, y, i
     double precision :: b
     real(8) :: binnum, binden1, binden2
     binnum = 1.0
     do i=0,X-1
        binnum=binnum*(X-i)
     end do
     
     binden1 = 1.0
     
     do i=0,Y-1
        binden1 = binden1*(Y-i)

     end do
     
     binden2 = 1.0

     do i=0,X-Y-1
        binden2=binden2*(X-Y-i)
     end do
     
     b=binnum/(binden1*binden2)

   end subroutine binomial

!!!!------------------------------------------------------------------!!!!
!!!!                        Rango -j a j en pasos de 1                !!!!
!!!!  n - tamaño del arreglo, j-límites del arreglo, rango(2j+1)      !!!!
!!!!------------------------------------------------------------------!!!!
 subroutine range(n,j,rango)
   integer i,ii,w
   integer rango(n)
   
   w=-j
   do i=1,n
      if (w < 0) then
         rango(i)=w
      else if(w == 0) then
         rango(i)=0
      else
         rango(i)= w
      end if
      w=w+1
   end do
 end subroutine range

!!!!-----------------------------------------------------------------!!!!
!!!! gmx gives eigenvalues & eigenvectors of A for a particular      !!!!
!!!! value of x(gammax), here we assume gammay=3gammax, hbar=1,      !!!!
!!!! eps=1                                                           !!!!
!!!!-----------------------------------------------------------------!!!!
 subroutine gmx(x,A,n,j,r,eigp)
   integer h,k,m,l,p,q,i,ii
   integer r(n)
   double precision x
   double precision :: A(n,n), B(n,n)
   double precision sqr1, sqr2
   real(8):: eigp(n)
   h= 2*j-1
   A(:,:)=0.0
   
   do i=1,n
      k=r(i)
      do ii=1,n
         m=r(ii)
         call kronecker(m,k,l)
         call kronecker(m+2,k,p)
         call kronecker(m-2,k,q)
         !print*, l,p,q,k,m
         sqr1= p*((j*(j+1)-m*(m+1))*(j*(j+1)-(m+1)*(m+2)))**0.5
         sqr2= q*((j*(j+1)-m*(m-1))*(j*(j+1)-(m-1)*(m-2)))**0.5
         A(i,ii)=m*l-0.5*(x/h)*(sqr1 + sqr2 - 4*l*(j*(j+1)-m**2))
      end do
   end do
   ! Se llama a la rutina para diagonalizar A
   call diasym(A,eigp,n)
 end subroutine gmx



!---------------------------------------------------------!
!Calls the LAPACK diagonalization subroutine DSYEV        !
!input:  a(n,n) = real symmetric matrix to be diagonalized!
!            n  = size of a                               !
!output: a(n,n) = orthonormal eigenvectors of a           !
!        eig(n) = eigenvalues of a in ascending order     !
!---------------------------------------------------------!
 subroutine diasym(a,eig,n)
 implicit none

 integer n,l,inf
 real*8  a(n,n),eig(n),work(n*(3+n/2))

 l=n*(3+n/2)
 call dsyev('V','U',n,a,n,eig,work,l,inf)

 end subroutine diasym


!!!!------------------------------------------------------!!!!
!!!!                Subroutine Kronecker Delta            !!!!
!!!!------------------------------------------------------!!!!
 subroutine kronecker(m,k,res)
   implicit none
   integer k, m, res

   if (k == m) then
      res=1
   else
      res=0
   end if
 end subroutine kronecker
